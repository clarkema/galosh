\input texinfo
@c %**start of header
@setfilename galosh.info
@settitle Galosh
@paragraphindent 0
@c %** end of header

@copying
Copyright (C) 2010, 2011, 2012 Michael Clarke.
@end copying

@titlepage
@title Galosh User's Manual
@author Michael Clarke
@insertcopying
@end titlepage

@ifnottex
@node top
@top Galosh

This file documents the `Galosh' suite of amateur radio utilities, version
0.0.1.

@insertcopying

@end ifnottex

@contents
@menu
* Introduction::
* Installation::
* Setup::
* Logging::
* QSL Management::
* Auditing::
@end menu

@node Introduction
@chapter Introduction

Galosh is a suite of related utilities to ease the lives of amateur
radio operators.  Currently, Galosh provides applications to manage your
log and deal with the QSLing process.  As time goes on, the suite will
be expanded to support an increasing range of activities within the
hobby.

Galosh has a strong focus on efficient offline operation, and is aimed
at users who are comfortable with, and prefer to work using, the
command-line.  The suite is designed to be user-modifiable at every
level, and you are encouraged to tinker and make Galosh do what
@emph{you} want.  The full source-code is, of course, available, but
beyond that, individual applications offer a hook system called
@dfn{mixins}.  This allows you to attach your own code to applications and
modify their behaviour.

@section Get Involved!

Want to get involved?  Galosh is mostly written in Common Lisp, with a
bit of Perl in places.  Code, documentation, and some graphical design
work are all required, as are suggestions of different use-cases.  To
get started, fork the project on Github
(@indicateurl{http://github.com/clarkema/galosh}), where you can also
open issues or feature requests.  Alternatively, e-mail the author at
@email{mike@@galosh.org.uk}.

@node Installation
@chapter Installation

At this stage in its development, Galosh is not intended to be @emph{installed}
as such, but run directly from a @command{git} checkout.

@section OS X Installation

@subsection Prerequisites

@enumerate
@item Xcode (Apple's developer tools).  Install from the App Store.
@item Homebrew, from @url{http://mxcl.github.com/homebrew/}
@end enumerate

@subsection Getting The Code

Once the prerequisites are in place, open a Terminal window, make a new
directory for Galosh, and use @command{git} to get a copy of the Galosh
code.  Once you have downloaded the code, run Galosh's setup script to
install all of its other dependencies.

@example
$ mkdir $HOME/git
$ cd $HOME/git
$ git clone git://github.com/clarkema/galosh.git
$ cd galosh
$ ./setup
@end example

Now the dependencies are installed, ensure that the main
@command{galosh} script is in your @env{PATH}.  You can do this either
by adding @file{$HOME/git/galosh} to your @env{PATH}, or by symlinking
the @command{galosh} command into a directory that is @emph{already} in
your @env{PATH}.

Finally, Galosh makes use of various sources of data from the Internet.
Once @command{galosh} is in your @env{PATH}, the final step is to
download the most recent versions of these data:@footnote{This includes
things like entity resolution data from Club Log, and is saved under
$HOME/.galosh}

@example
$ galosh update
@end example

@section GNU/Linux Installation

TODO

@section FreeBSD Installation

TODO

@section Bash Completion (Optional)

Adding Bash completion support is fully optional, but offers you the
convenience of being able to tab-complete Galosh command-names and
options within your shell.  For example, with completion enabled, you
can simply type @command{galosh} and press tab twice to get a list of
all available Galosh commands.

Galosh provides a Bash completion file in
@file{contrib/galosh-bash-completion}.  To have completion work for you,
this file needs to be sourced, one way or another, when @command{bash}
starts.  There are many ways of achieving this.  One possibility is to
make a directory such as @file{$HOME/local/etc/bash_completion.d} to
hold your personal Bash completion files, and then add something like
this to your @file{.bashrc}:

@example
#####################
# Enable completion if possible
#####################
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion

    LOCAL_COMPLETION_DIR=$HOME/local/etc/bash_completion.d

    if [ -d $LOCAL_COMPLETION_DIR -a -r $LOCAL_COMPLETION_DIR -a \
            -x $LOCAL_COMPLETION_DIR ]; then
        for i in $LOCAL_COMPLETION_DIR/*; do
            [[ $@{i##*/@} != @@(*~|*.bak|*.swp|\#*\#|*.dpkg*|.rpm*) ]] &&
                [ \( -f $i -o -h $i \) -a -r $i ] && . $i
        done
    fi

    unset LOCAL_COMPLETION_DIR
    unset i
fi
@end example

@noindent
With this in place, symlink @file{contrib/galosh-bash-completion} into@*
@file{$HOME/local/etc/bash_completion.d}.  Next time you restart your
shell, you should have completion of @command{galosh} commands.

@node Setup
@chapter Setup

@menu
* The Repository::
* Configuration::
* QRZ Integration::
@end menu

Galosh is designed to be as flexible as possible and is configurable on many
levels.  Unfortunately, the cost of this rich configurability is that is can
sometimes be difficult to know where and how to make changes.  This chapter
gives an overview of Galosh's configuration options and then walks you
through the process of getting up and running with a basic setup.

@node The Repository
@section The Repository

Galosh is a suite of separate but related commands.  As such, many of
the Galosh commands might need access to shared data; from configuration
up to your full QSO log.  However, you might well want to maintain
multiple logs for different purposes; perhaps an `everyday' log and a
`contest' log, or a distinct log for a special event station.  It would
be inconvenient if dealing with different logs, different rigs, or
different configuration for any other purpose entailed passing explicit
details to every Galosh command you wanted to run.  To avoid this,
Galosh uses the concept of @dfn{repositories}, in a similar fashion to
version control systems like @command{git}, upon which Galosh is in many
ways modelled.

@strong{Most uses of Galosh require you to be in a repository.}

A repository is nothing more than a special directory in the file system
that contains configuration files, your log, and other related
information.  To create one, simply create a new directory, change into
it, and run @command{galosh init}.

@example
$ mkdir log
$ cd log
$ galosh init
@end example

We can explore the new repository with @command{tree}:

@example
$ tree -a
.
`-- .galosh
    |-- config
    |-- log.db
    `-- tmp
@end example

@file{.galosh/log.db} is the new (currently empty) SQLite database which
will contain your logs.  @file{.galosh/tmp} is used for temporary files
created in the course of running various commands such as
@command{galosh journal}, and can be ignored.  Finally,
@file{.galosh/config} is the configuration file for this repository.

@node Configuration
@section The Configuration System

@subsection Global Configuration

Galosh will read its global configuration from @file{$HOME/.galosh/config}.
Any configuration options that you would like to apply to all (or nearly all)
of your repositories, such as your callsign, you should set in this file.  The
configuration file uses an INI-style format, with section headers in square
brackets on a line of their own.  Options are specified one per line, with an
equals sign between the name and value, and no whitespace at the start of the
line.  To start with, edit your global configuration file to specify your name and call.

@example
[user]
name = Mike Clarke
call = VP8DMH
@end example

Configuration options are often referred to in the rest of the documentation in
@dfn{dotted form}.  An option written in dotted form is written on a single
line, with a period between the section and option names.  For example,
we might refer to the @code{call} option above by saying ``Set @code{user.call}
to your callsign.''

@subsection Per-repository Configuration

Notice I said above that you should use the global configuration file for any
options that you would like to apply to @emph{nearly} all of your repositories.
Each repository also has its own configuration file at @file{.galosh/config}.
This file follows exactly the same format as the global file and allows you
to override individual options on a per-repository basis.

@node QRZ Integration
@section QRZ Integration

Galosh includes several facilities to help you discover more about the stations
you're working.  This aids in accurate logging, as well as helping you spot
stations that are useful for awards you're working towards, and being of
general interest.

All of the current lookup features rely on callsign data from
@indicateurl{qrz.com}.  @indicateurl{qrz.com} offers two forms of access
to its database: an XML API for online lookup, and a downloadable database
for offline searches.  Each has advantages and disadvantages.

The online lookup is always up-to-date with the latest data, and offers far
more information than the offline database.  However, if you don't have the
luxury of an always-on Internet connection, it's of no use.  Even if you @emph{do}
have an always-on connection, a high latency connection such as a satellite
link can introduce an unacceptable delay into the lookup process.

The offline database requires you to download data files from
@indicateurl{qrz.com} and import them using @command{galosh import-qrz-db},
but once the data are imported you can perform lookups much more quickly, and
without an Internet connection.  The disadvantage is that the offline database
provides far less information for each callsign; essentially just name and
postal address, along with some license metadata.  In particular, the offline
database doesn't contain location (latitude and longitude, or grid) or IOTA
information.

Galosh supports both @indicateurl{qrz.com}'s XML API and its downloadable
database.  To get started with either of these, you'll need a subscription from
@indicateurl{qrz.com}.

@menu
* Getting Started With The qrz.com XML API::
* Getting Started With The qrz.com Offline Database::
@end menu

@node Getting Started With The qrz.com XML API
@subsection Getting Started With The qrz.com XML API

If you don't already have an XML subscriber account with
@indicateurl{qrz.com}, go to @url{http://www.qrz.com/XML/index.html} and
sign up.  Once you have your username and password, you'll need to
configure Galosh (@pxref{Configuration}).  Add the following to your
configuration file:

@example
[qrz]
user = yourcall
password = yourpassword
@end example

Once Galosh is configured with your account details, perform a test QRZ
lookup from the command-line:

@example
$ galosh qrz vp8dmh
CLARKE, Mike
Rothera Research Station
Adelaide Island
ANTARCTICA

Lat/Long: -67.566667 -68.133333
Grid: FC52wk
IOTA: AN-001

QSL Via: VIA G0VGS
QSL Methods: eQSL
@end example

@node Getting Started With The qrz.com Offline Database
@subsection Getting Started With The qrz.com Offline Database

If you don't already have a database download account with
@indicateurl{qrz.com}, go to @url{http://www.qrz.com/pd/} and sign
up.  Once you've signed up, download and unpack the archive described as
`Single database file callbkc.dat, with index - sorted by callsign'.  In the unpacked
files, you should see @file{callbkc.dat} and @file{country.dat}.  These contain
the raw callsign and country data.  For them to be useful to Galosh they must
first be imported, using @command{galosh import-qrz-db}.

@example
$ galosh import-qrz-db callbkc.dat country.dat
@end example

Once the import is complete, perform a test QRZ lookup from the
command-line:

@example
$ galosh qrz --offline vp8dmh
CLARKE, Mike
Rothera Research Station
Adelaide Island
ANTARCTICA
@end example

As can clearly be seen from the output, less information is available when running
offline.  However, comparing online and offline lookups under @command{time}
demonstrates another difference:

@example
$ time galosh qrz vp8dmh > /dev/null

real    0m6.816s
user    0m0.660s
sys     0m0.788s

$ time galosh qrz --offline vp8dmh > /dev/null

real    0m1.237s
user    0m0.552s
sys     0m0.556s

@end example

On the satellite connection I was using when I wrote this, there is a 5.5-second
difference in response time.

@node Logging
@chapter Logging

QSO logging under Galosh is provided by the @command{log} command.  Once
you have initialized a repository with @command{galosh init}, QSO
logging under Galosh is intended to be as fast as possible; allowing
efficient logging under busy run conditions while also offering
sufficient flexibility to allow the operator to enter additional
information for a QSO as required.

@section Your First QSO

To get started, run @command{galosh log} within your repository
directory.  Once the logger has started simply type in a callsign and
hit @key{ENTER} twice.  A QSO will be added to the log using all of the
default information: 59 both ways on 14260kHz.

Normally, anything you type in the logger is taken as the start of a log
entry.  The first word is taken as the callsign you are logging, and is
automatically converted to upper-case as you type.  The second and third
words are optional and represent the received and sent signal reports
respectively.  A mode-specific default is used if they are omitted.
If only a single digit is entered for either signal report it is taken
as @samp{5x} in phone modes or @samp{5x9} in tone modes.

@subheading Examples

@multitable @columnfractions .20 .80
@item @code{M0PRL}
@tab 59 both ways in phone modes; 599 in tone modes.
@item @code{M0PRL 4 1}
@tab 54 by 59, or 549 by 599.
@item @code{M0PRL 23}
@tab 23 by 59
@item @code{M0PRL 46 32}
@tab 46 by 32
@end multitable

@section Commands

If you start a new entry with a colon, your entry will be interpreted as a
command rather than a log entry.  Command mode allows you to set information
such as your frequency and mode, and to quit the application.

@subsection Setting A Different Frequency

Galosh does not currently get frequency information directly from your radio;
when you want to log on a new frequency, you must tell the logger manually.
To do this, type:

@example
:set qrg 7125000
@end example

Note that the frequency is in Hertz, not kHz.

@subsection Setting Mode And IOTA Information

Mode and IOTA information can be changed in much the same way as the frequency:

@example
:set mode SSB
:set mode CW
:set iota AN-001
@end example

@section Lesser-used Options

@subsection Time Adjustment

Galosh will log using your computer's idea of UTC.  Should this be
wrong, ideally it should be corrected at the operating system level.
However, in some cases that might not be possible, and so Galosh
provides the @code{core.time_fudge} option.  This allows you to specify
an integer number of seconds to be added to the operating system's idea
of UTC.  For example, to log a time of 3 hours earlier than
would otherwise be the case set @code{core.time_fudge} to
@code{-10800}.

@node QSL Management
@chapter QSL Management

Making and logging QSOs is all very well, but it's only really the first
half of the story.  Whether you are working towards DXCC, have an
interest in islands or have just returned from your latest expedition;
the next stage is dealing with QSL cards.

In this chapter we will consider various facets of QSL management, and
how to deal with them using Galosh's @command{qsl} command.

@menu
* Processing Incoming Requests::
* Printing Cards::
@end menu

@node Processing Incoming Requests
@section Processing Incoming Requests

So you've just returned from your latest exotic destination.  The
airline has finally found your luggage, and you've unpacked and are
facing the twin realities of going back to work and being deluged
beneath a flood of incoming QSL cards.  In fact, the first batch have
already arrived...

@subsection Direct Requests

We'll start by dealing with direct requests.

Run @command{galosh qsl} within your repository directory.  As you start
typing a callsign, Galosh will show possible completions at the top of
the screen.  Once you have typed the full callsign, hit @key{Enter} and
you will be presented with a list of QSOs made with that station, most
recent first.  Select a QSO by typing the number in the first column and
hitting enter again.

You should now be looking at the QSO detail screen.  This screen
displays the basic QSO details at the top and QSL tracking information
at the bottom.  The middle section contains information useful for
award-tracking.  The first column in the middle section is information
about your station; copied into the log from your configuration at the
time of the QSO.  The second column contains the same information for
the other station; generally this will just be the DXCC entity
calculated from the other station's callsign along with any other
information you entered at the time of the QSO.  If you have set up
@indicateurl{qrz.com} XML API access (@pxref{Getting Started With The
qrz.com XML API}) there will be a third column showing information
about the other station downloaded from @indicateurl{qrz.com}.

Assuming the QSL request is good, you can now process it in just a few
keystrokes.  Hit @key{r} to record that you have received a direct QSL
for this contact, and @key{t} to record that you have queued a card to
be sent.  @key{v} will merge details about the other station from
the @indicateurl{qrz.com} column into the local database.  @key{a}
combines the effects of @key{r}, @key{t}, and @key{v}.

Once you've processed the card, hit @key{Esc} to move back through the
list of contacts and start again with the next card.

At the end of your QSLing session you will have accumulated a list of
QSOs in the database which are marked as ``QSL queued for sending'';
i.e., you have prepared a QSL card for the contact but have not yet
posted it.  Once you have posted the batch of cards, run
@w{@command{galosh qsl mark-sent}} to tell Galosh that you
have actually sent the cards.

@subsection Requests Via Other Routes

@command{galosh qsl} shows the current QSL route at the top-left of the
screen: the default is `D' for direct.  Generally it's anticipated that
incoming cards will be dealt with in batches from a single source; so
you'll have a batch of direct cards, or a batch of cards from the
bureau, etc.  With that in mind, you can specify the route to use for a
particular QSLing session with the @option{--route} command-line
option.  This option accepts `D' for direct, `B' for bureau, `E' for
electronic, or `M' for manager.

You can also change the current route from within @command{galosh qsl}
by entering @command{:set route FOO}, where @code{FOO} is one of D, B,
E, or M.

@node Printing Cards
@section Printing Cards

The functionality in this section depends on you having a working
TeX Live installation.  The Galosh setup script does not install TeX
Live automatically, as it is large, complex, and not everyone will need
it.  To install it yourself, visit @url{http://www.tug.org/texlive} and
follow the instructions there.  Once you have got to the stage of being
able to run @command{pdflatex}, you're ready to proceed.

@node Auditing
@chapter Auditing

A complete and accurate log is invaluable when applying for awards.
Running @command{galosh audit} regularly can help you complete missing
information as well as identify and correct inconsistencies as you go
along.  This in turn can help you avoid the situation of chasing that
final state for WAS when you unknowingly worked a station there years
ago...

To get started, simply run @command{galosh audit} within your
repository.  It will scan your log for problems and print a note for
each; but won't actually make any changes to your log.  To have
@command{galosh audit} automatically fix everything that it can, pass it
the @option{--commit} option.  For full details of everything that
@command{galosh audit} checks for, see its manpage.

@bye

