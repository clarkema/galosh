#!/usr/bin/perl -w

use strict;
use 5.010;

use FindBin;
use lib "$FindBin::RealBin/perllib";

use File::Spec;
use File::HomeDir;

# Note that 'require order' below makes processing stop at the first
# non-option argument.  In this way, options are shared out correctly
# when running something like 'galosh --debug foo --bar --baz'
use Getopt::Long qw(:config require_order);

umask 0077;

our $context_dir     = File::Spec->join( File::Spec->curdir(), ".galosh" );
our $home_galosh_dir = File::Spec->join( File::HomeDir->my_home, ".galosh" );
our $compiled_dir    = File::Spec->join( $home_galosh_dir, "compiled" );
our $galosh_dir;

######################################################################
# General utility functions here
######################################################################
sub get_context
{
    my $config_file = File::Spec->join( $context_dir, "config" );

    if ( -e -f $config_file ) {
        return $context_dir;
    }
    else {
        return;
    }
}

sub find_galosh_dir
{
    if ( defined $ENV{'GALOSH_DIR'} ) {
        $galosh_dir = $ENV{'GALOSH_DIR'};
    }
    elsif ( get_context() ) {
        $galosh_dir = get_context();
    }
    else {
        die( "Couldn't find context directory." );
    }

    # The trailing slash below is required to make the resulting path usable
    # with Lisp's merge-pathnames; if it's missing the last element of the path
    # is assumed to be a file and removed when you try to merge with another
    # representing just a file name.
    # FIXME: Find a more portable way to add the correct separator for the
    # current platform.
    $ENV{'GALOSH_DIR'} = File::Spec->rel2abs( $galosh_dir ) . "/";
}

######################################################################
# Command implemented as cmd_* functions should be defined below in
# alphabetical order.
######################################################################

sub cmd_init
{
    exec( "$FindBin::RealBin/galosh-init" )
}

sub cmd_help
{
    my $command = $ARGV[1];
    
    my $help = <<HELP;
Usage: galosh COMMAND [ARGS]

The most commonly used galosh commands are:
log     Start the galosh logger

See 'galosh help COMMAND' for more information on a specific command.
HELP

    if ( defined $command ) {
        exec( "man galosh-$command" );
    }
    else {
        print $help;
    }
}

sub cmd_compile
{
    mkdir $home_galosh_dir unless -d $home_galosh_dir;
    mkdir $compiled_dir unless -d $compiled_dir;

    my $target_command = "galosh-$ARGV[1]";
    my $output_path = File::Spec->join( $compiled_dir, $target_command );

    exec( "buildapp", ( '--eval', qq{(sb-ext:disable-debugger)},
                        '--eval', qq{(sb-sys:enable-interrupt sb-unix:sigint #'(lambda (x y z) (declare (ignore x y z)) (sb-ext:quit)))},
                        '--load', qq{$FindBin::RealBin/quicklisp/setup.lisp},
                        '--eval', qq{(push "$FindBin::RealBin/" asdf:*central-registry*)},
                        '--require', $target_command,
                        '--entry',   "${target_command}::main",
                        '--output',  $output_path ) );
}

sub cmd_journal
{
    use Galosh::Journal;
    Galosh::Journal::main();
}

######################################################################
# Main execution starts here
######################################################################

# Application option variables
my $debug = 0;

my $options_successful = GetOptions(
    'debug'            => \$debug,
);

my $command = $ARGV[0] || 'help';

my $sub_name      = "cmd_$command";
my $package_name  = "galosh-$command";
my $compiled_path = File::Spec->join( $compiled_dir, $package_name );

if ( $sub_name eq 'cmd_init' ) {
    cmd_init()
}
else {
    find_galosh_dir();

    if ( defined( &$sub_name ) ) {
        no strict "refs";
        $sub_name->();
    }
    elsif ( -e $compiled_path ) {
        exec( $compiled_path, @ARGV );
    }
    else {
        exec( "sbcl", ( '--noinform',
                        '--noprint',
                        '--no-userinit',
                        '--eval', qq{(sb-sys:enable-interrupt sb-unix:sigint #'(lambda (x y z) (declare (ignore x y z)) (sb-ext:quit)))},
                        '--load', qq{$FindBin::RealBin/quicklisp/setup.lisp},
                        '--eval', qq{(push "$FindBin::RealBin/" asdf:*central-registry*)},
                        '--eval',
                        @{[ $debug
                                ? qq{(asdf:oos 'asdf:load-op "$package_name")}
                                : qq{(ql-impl-util:call-with-quiet-compilation #'(lambda () (asdf:oos 'asdf:load-op "$package_name" :verbose nil)))}
                        ]},
                        '--eval', "(${package_name}::main sb-ext:*posix-argv*)",
                        '--eval' , "(quit)",
                        '--end-toplevel-options',
                        @ARGV, ));
    }
}
