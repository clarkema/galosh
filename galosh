#!/usr/bin/perl -w

use strict;
use 5.010;

use FindBin;
use lib "$FindBin::RealBin/perllib";

use File::Glob     ':glob';
use File::Spec;
use File::HomeDir;

# Note that 'require order' below makes processing stop at the first
# non-option argument.  In this way, options are shared out correctly
# when running something like 'galosh --debug foo --bar --baz'
use Getopt::Long qw(:config require_order);

umask 0077;

our $clublog_api_key = 'a5a1046e08eebc5fdef1f45ebf2ad049e914c850';
our $context_dir     = File::Spec->join( File::Spec->curdir(), ".galosh" );
our $home_galosh_dir = File::Spec->join( File::HomeDir->my_home, ".galosh" );
our $compiled_dir    = File::Spec->join( $home_galosh_dir, "compiled" );
our $galosh_dir;

######################################################################
# General utility functions here
######################################################################
sub get_context
{
    my $config_file = File::Spec->join( $context_dir, "config" );

    if ( -e -f $config_file ) {
        return $context_dir;
    }
    else {
        return;
    }
}

sub find_galosh_dir
{
    if ( defined $ENV{'GALOSH_DIR'} ) {
        $galosh_dir = $ENV{'GALOSH_DIR'};
    }
    elsif ( get_context() ) {
        $galosh_dir = get_context();
    }

    # The trailing slash below is required to make the resulting path usable
    # with Lisp's merge-pathnames; if it's missing the last element of the path
    # is assumed to be a file and removed when you try to merge with another
    # representing just a file name.
    # FIXME: Find a more portable way to add the correct separator for the
    # current platform.
    if ( $galosh_dir ) {
        $ENV{'GALOSH_DIR'} = File::Spec->rel2abs( $galosh_dir ) . "/";
    }
}

######################################################################
# Command implemented as cmd_* functions should be defined below in
# alphabetical order.
######################################################################

sub cmd_init
{
    exec( "$FindBin::RealBin/galosh-init" )
}

sub cmd_help
{
    my $command = $ARGV[1];
    
    my $help = <<HELP;
Usage: galosh COMMAND [ARGS]

The most commonly used galosh commands are:
log     Start the galosh logger

See 'galosh help COMMAND' for more information on a specific command.
HELP

    if ( defined $command ) {
        $ENV{'MANPATH'} = File::Spec->join( $FindBin::RealBin, "doc" );
        exec( "man galosh-$command" );
    }
    else {
        print $help;
    }
}

sub cmd_lisp_repl
{
    exec( "sbcl", ( '--noinform',
                    '--no-userinit',
                    '--eval', qq{(sb-sys:enable-interrupt sb-unix:sigint #'(lambda (x y z) (declare (ignore x y z)) (sb-ext:quit)))},
                    '--load', qq{$FindBin::RealBin/quicklisp/setup.lisp},
                    '--eval', qq{(push "$FindBin::RealBin/" asdf:*central-registry*)},
                    '--eval', qq{(ql-impl-util:call-with-quiet-compilation
                                    #'(lambda () (mapcar #'(lambda (p) (asdf:oos 'asdf:load-op p :verbose nil))
                                                         '("galosh-lisp" "swank"))))},
                    '--eval', "(swank:create-server)",
                    '--end-toplevel-options',
                    @ARGV, ));
}

sub cmd_compile
{
    my $target_command = "galosh-$ARGV[1]";
    my $output_path = File::Spec->join( $compiled_dir, $target_command );

    if ( -e "$FindBin::RealBin/$target_command.asd" ) {
        mkdir $home_galosh_dir unless -d $home_galosh_dir;
        mkdir $compiled_dir unless -d $compiled_dir;

        exec( "buildapp", ( '--eval', qq{(sb-ext:disable-debugger)},
                            '--eval', qq{(sb-sys:enable-interrupt sb-unix:sigint #'(lambda (x y z) (declare (ignore x y z)) (sb-ext:quit)))},
                            '--load', qq{$FindBin::RealBin/quicklisp/setup.lisp},
                            '--eval', qq{(push "$FindBin::RealBin/" asdf:*central-registry*)},
                            '--require', $target_command,
                            '--eval', qq#(handler-case (${target_command}::buildapp-init) (t ()))#,
                            '--entry',   "${target_command}::main",
                            '--output',  $output_path ) );
    }
}

sub cmd_config
{
    my $context_dir = get_context();
    my $home_config_file = File::Spec->join( $ENV{'HOME'}, ".galosh", "config" );
    my $repo_config_file = File::Spec->join( $context_dir, "config" );
    my $config = {};

    read_config( $home_config_file, $config );
    read_config( $repo_config_file, $config );

    if ( $ARGV[1] ) {
        print $config->{ $ARGV[1] }, "\n";
    }
    else {
        while ( my ($k, $v) = each %$config ) {
            print "$k = $v\n"
        }
    }
}

sub cmd_recompile_all
{
    my @executables = bsd_glob( "$compiled_dir/galosh-*" );
    for my $executable (@executables) {
        my ($command) = $executable =~ m!galosh-([a-z0-9]+)$!;
        print "Recompiling $command...\n";
        system( "galosh compile $command ");
    }
}

sub read_config
{
    my $file     = shift;
    my $hash_ref = shift;
    my $section;

    open( my $fh, '<', $file ) or die "Failed to open config file $file: $!\n";

    while ( <$fh> ) {
        next if /^\s*#/;
        next if /^$/;

        if ( m/^\[([^\]]+)\]/ ) {
            $section = $1;
        }
        else {
            m/^(.*?)\s*=\s*(.*)/;
            my $option = $1;
            my $value = $2;

            $hash_ref->{ "$section.$option" } = $value;
        }
    }

    close( $fh );
}

sub cmd_browser
{
    use Galosh::Browser;
    Galosh::Browser::main( @ARGV );
}

sub cmd_create_qsl
{
    use Galosh::CreateQSL;
    Galosh::CreateQSL::main();
}

sub cmd_journal
{
    use Galosh::Journal;
    Galosh::Journal::main();
}

sub cmd_update
{
    use Galosh::Update;
    Galosh::Update::main();
}

######################################################################
# Main execution starts here
######################################################################

# Application option variables
my $debug = 0;

my $options_successful = GetOptions(
    'debug'            => \$debug,
);

my $command = $ARGV[0] || 'help';

(my $sub_name     = "cmd_$command") =~ s/-/_/g;
my $package_name  = "galosh-$command";
my $compiled_path = File::Spec->join( $compiled_dir, $package_name );

# Ensure $HOME/.galosh exists -- sub-commands will assume its presence
unless ( -e $home_galosh_dir && -d $home_galosh_dir ) {
    mkdir ( $home_galosh_dir );
}

find_galosh_dir();

if ( defined( &$sub_name ) ) {
    no strict "refs";
    $sub_name->();
}
elsif ( -e $compiled_path ) {
    exec( $compiled_path, @ARGV );
}
elsif ( -e "$FindBin::RealBin/${package_name}.asd" ) {
    exec( "sbcl", ( '--noinform',
                    '--noprint',
                    '--no-userinit',
                    '--eval', qq{(sb-sys:enable-interrupt sb-unix:sigint #'(lambda (x y z) (declare (ignore x y z)) (sb-ext:quit)))},
                    '--load', qq{$FindBin::RealBin/quicklisp/setup.lisp},
                    '--eval', qq{(push "$FindBin::RealBin/" asdf:*central-registry*)},
                    '--eval',
                    @{[ $debug
                            ? qq{(asdf:oos 'asdf:load-op "$package_name")}
                            : qq{(ql-impl-util:call-with-quiet-compilation #'(lambda () (asdf:oos 'asdf:load-op "$package_name" :verbose nil)))}
                    ]},
                    '--eval', "(${package_name}::main sb-ext:*posix-argv*)",
                    '--eval' , "(quit)",
                    '--end-toplevel-options',
                    @ARGV, ));
}
elsif ( -e "$FindBin::RealBin/${package_name}" ) {
    no warnings qw(uninitialized);
    exec( "$FindBin::RealBin/${package_name}", @ARGV[1,] );
}
else {
    die "Don't know how to run $package_name!";
}
